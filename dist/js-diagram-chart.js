!function(t){var i={};function n(o){if(i[o])return i[o].exports;var s=i[o]={i:o,l:!1,exports:{}};return t[o].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=i,n.d=function(t,i,o){n.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,i){if(1&i&&(t=n(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var s in t)n.d(o,s,function(i){return t[i]}.bind(null,s));return o},n.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(i,"a",i),i},n.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},n.p="",n(n.s=0)}([function(t,i,n){"use strict";function o(t,i,n,o,s,e,h){t.beginPath(),t.moveTo(i+e,n),t.lineTo(i+o-e,n),t.quadraticCurveTo(i+o,n,i+o,n+e),t.lineTo(i+o,n+s-e),t.quadraticCurveTo(i+o,n+s,i+o-e,n+s),t.lineTo(i+e,n+s),t.quadraticCurveTo(i,n+s,i,n+s-e),t.lineTo(i,n+e),t.quadraticCurveTo(i,n,i+e,n),t.closePath(),t.stroke(),h||t.fill()}function s(t,i,n,o,s,e,h){t.textAlign="center",t.textBaseline="middle",n+=s/2,o+=e/2;for(var a=i.split("\n"),c=0;c<a.length;c++){for(var r="",g=a[c].split(" "),f=0;f<g.length;f++){var l=r+g[f]+" ";t.measureText(l).width>s?(r=g[f]+" ",o-=h/2):r=l}r="";for(var d=0;d<g.length;d++){var m=r+g[d]+" ";t.measureText(m).width>s?(t.fillText(r,n,o),r=g[d]+" ",o+=h):r=m}t.fillText(r,n,o),o+=h}}function e(t,i){for(var n=0;n<t.length;n++)if(t[n].id==i)return t[n];return null}function h(t){this.init=function(t){if(this.canvas=document.getElementById(t.config.element),!this.canvas)throw"Element not found";this.context=this.canvas.getContext("2d"),this.context=this.canvas.getContext("2d"),this.context.lineWidth=t.config.lineWidth,t.config.autoSize&&(this.canvas.width=this.canvas.parentNode.clientWidth,this.canvas.height=this.canvas.parentNode.clientHeight),function(t){var i=document.createElementNS("http://www.w3.org/2000/svg","svg"),n=i.createSVGMatrix();t.getTransform=function(){return n};var o=[],s=t.save;t.save=function(){return o.push(n.translate(0,0)),s.call(t)};var e=t.restore;t.restore=function(){return n=o.pop(),e.call(t)};var h=t.scale;t.scale=function(i,o){return n=n.scaleNonUniform(i,o),h.call(t,i,o)};var a=t.rotate;t.rotate=function(i){return n=n.rotate(180*i/Math.PI),a.call(t,i)};var c=t.translate;t.translate=function(i,o){return n=n.translate(i,o),c.call(t,i,o)};var r=t.transform;t.transform=function(o,s,e,h,a,c){var g=i.createSVGMatrix();return g.a=o,g.b=s,g.c=e,g.d=h,g.e=a,g.f=c,n=n.multiply(g),r.call(t,o,s,e,h,a,c)};var g=t.setTransform;t.setTransform=function(i,o,s,e,h,a){return n.a=i,n.b=o,n.c=s,n.d=e,n.e=h,n.f=a,g.call(t,i,o,s,e,h,a)};var f=i.createSVGPoint();t.transformedPoint=function(t,i){return f.x=t,f.y=i,f.matrixTransform(n.inverse())}}(this.context),t.config.scaleFactor=1.1,t.config.zoomScale=0,t.config.moveX=0,t.config.moveY=0,this.config=t.config,this.update(t),this.draw(),this.config.mouseEvents&&this.events()},this.addZoom=function(t){this.config.zoomScale+=t;var i=this.context.transformedPoint(this.canvas.width/2,this.canvas.height/2);this.context.translate(i.x,i.y);var n=Math.pow(this.config.scaleFactor,t);this.context.scale(n,n),this.context.translate(-i.x,-i.y),this.draw()},this.resetZoom=function(){this.addZoom(-this.config.zoomScale),this.context.translate(-this.config.moveX,-this.config.moveY),this.config.zoomScale=0,this.config.moveX=0,this.config.moveY=0},this.events=function(){var t=this,i=t.canvas.width/2,n=t.canvas.height/2,o=!1;t.canvas.addEventListener("mousedown",function(s){document.body.style.mozUserSelect=document.body.style.webkitUserSelect=document.body.style.userSelect="none",t.canvas.style.cursor="move",i=s.offsetX||s.pageX-t.canvas.offsetLeft,n=s.offsetY||s.pageY-t.canvas.offsetTop,o=t.context.transformedPoint(i,n),!1,s.returnValue=!1},!1),t.canvas.addEventListener("mousemove",function(s){if(i=s.offsetX||s.pageX-t.canvas.offsetLeft,n=s.offsetY||s.pageY-t.canvas.offsetTop,!0,o){var e=t.context.transformedPoint(i,n);t.context.translate(e.x-o.x,e.y-o.y),t.draw(),t.config.moveX+=e.x-o.x,t.config.moveY+=e.y-o.y}},!1),t.canvas.addEventListener("mouseup",function(i){o=null,t.canvas.style.cursor="default"},!1);var s=function(i){var n=i.wheelDelta?i.wheelDelta/300:i.detail?-i.detail:0;return t.addZoom(n),i.preventDefault()&&!1};t.canvas.addEventListener("DOMMouseScroll",s,!1),t.canvas.addEventListener("mousewheel",s,!1)},this.update=function(t){for(var i=[],n=[],o=0,s=0,h=0;h<t.diagrams.length;h++){for(var a={id:t.diagrams[h].id,x:0,y:0,cx:0,cy:0,text:t.diagrams[h].text,color:t.diagrams[h].color,bgColor:t.diagrams[h].bgColor,parents:[],children:[],virgin:!0,orphan:!0},c=0;c<t.links.length;c++)t.links[c].source==a.id&&(a.parents.push(t.links[c].parent),a.orphan=!1),t.links[c].parent==a.id&&(a.children.push(t.links[c].source),a.orphan=!1);i.push(a)}for(var r=function t(n,o){if(n.virgin){n.virgin=!1,n.y=o,o<s&&(s=o);for(var h=0;h<n.children.length;h++){t(e(i,n.children[h]),o+1)}for(var a=0;a<n.parents.length;a++){t(e(i,n.parents[a]),o-1)}}},g=0;g<i.length;g++)r(i[g],0);for(var f=0;f<i.length;f++){var l=e(n,i[f].y);null!=l?i[f].orphan||(l.count++,i[f].x=l.count,l.count>o&&(o=l.count)):i[f].orphan||(n.push({id:i[f].y,count:1}),i[f].x=1)}this.config.linesCount=n,this.config.columnsCount=o,this.config.columnLower=s,this.diagrams=i},this.draw=function(){if(this.context.transformedPoint){var t=this.context.transformedPoint(0,0),i=this.context.transformedPoint(this.canvas.width,this.canvas.height);this.context.clearRect(t.x,t.y,i.x-t.x,i.y-t.y)}else this.context.clearRect(0,0,this.canvas.width,this.canvas.height);var n=this.config.width+2*this.config.margin;0==this.config.columnsCount&&(this.config.columnsCount=parseInt(this.canvas.width/n));var h=this.config.columnsCount*n,a=parseInt(this.canvas.width)/2-h/2;this.context.rotate(2*Math.PI);for(var c=0,r=0;r<this.diagrams.length;r++)if(this.diagrams[r].orphan){var g=a+this.config.margin+parseInt(c%this.config.columnsCount)*(this.config.width+2*this.config.margin),f=this.config.margin+parseInt(c/this.config.columnsCount)*(this.config.height+2*this.config.margin);this.context.fillStyle=this.diagrams[r].bgColor,this.context.strokeStyle=this.diagrams[r].bgColor,o(this.context,g,f,this.config.width,this.config.height,this.config.radius,this.config.hiddenBg);var l=this.context;l.fillStyle=this.diagrams[r].color,l.font=this.config.fontSize+"px "+this.config.fontFamily,s(this.context,this.diagrams[r].text,g+this.config.padding,f,this.config.width-2*this.config.padding,this.config.height,this.config.fontSize+.2*this.config.fontSize),c++}var d=this.config.height+3*this.config.margin+parseInt((c-1)/this.config.columnsCount)*(this.config.height+2*this.config.margin);isNaN(d)&&(d=this.config.margin);for(var m=0;m<this.diagrams.length;m++)if(!this.diagrams[m].orphan){var u=h/e(this.config.linesCount,this.diagrams[m].y).count,x=a+u*this.diagrams[m].x+(u/2-this.config.width/2)-u,v=d+Math.abs(this.config.columnLower)*(this.config.height+2*this.config.margin)+this.diagrams[m].y*(this.config.height+2*this.config.margin);this.diagrams[m].left=x,this.diagrams[m].top=v}for(var p=0;p<this.diagrams.length;p++)if(!this.diagrams[p].orphan)for(var w=0;w<this.diagrams[p].parents.length;w++){var y=e(this.diagrams,this.diagrams[p].parents[w]),T=!1,W=!1,b=!1,S=0;this.diagrams[p].id==y.id?b=!0:this.diagrams[p].y<y.y?T=!0:this.diagrams[p].y-y.y>1&&(W=!0),this.context.setLineDash&&this.context.setLineDash([this.config.lineWidth,0]),this.context.strokeStyle=this.config.lineColor||this.diagrams[p].bgColor,this.context.fillStyle=this.config.lineColor||this.diagrams[p].bgColor;var C=0;b?(C=this.config.margin/2-this.config.margin/this.config.columnsCount*this.diagrams[p].x,isFinite(C)||(C=0),this.context.beginPath(),this.context.moveTo(y.left+this.config.width/2+-1*C-C,y.top+this.config.height),this.context.lineTo(y.left+this.config.width/2+-1*C-C,y.top+this.config.height+this.config.margin/2.5),this.context.lineTo(y.left+this.config.width/2+-1*C+C,y.top+this.config.height+this.config.margin/2.5),this.context.lineTo(y.left+this.config.width/2+-1*C+C,y.top+this.config.height+this.config.arrowWidth/2),this.context.stroke(),this.context.beginPath(),this.context.moveTo(y.left+this.config.width/2+-1*C+C,y.top+this.config.height),this.context.lineTo(y.left+this.config.width/2-this.config.arrowWidth/2+-1*C+C,y.top+this.config.height+this.config.arrowWidth),this.context.lineTo(y.left+this.config.width/2+this.config.arrowWidth/2+-1*C+C,y.top+this.config.height+this.config.arrowWidth),this.context.fill()):T?(this.config.lineDiff&&(C=this.config.margin/2-this.config.margin/this.config.columnsCount*this.diagrams[p].x+(this.config.margin-(this.config.arrowWidth+2*this.config.lineWidth*0))),this.context.setLineDash&&this.context.setLineDash([this.config.lineWidth,this.config.lineWidth]),this.context.beginPath(),this.context.moveTo(this.diagrams[p].left+this.config.width/2+C,this.diagrams[p].top+this.config.height/2+C),this.context.lineTo(this.diagrams[p].left+this.config.width+this.config.margin+C,this.diagrams[p].top+this.config.height/2+C),this.context.lineTo(this.diagrams[p].left+this.config.width+this.config.margin+C,y.top-this.config.margin+C),this.context.lineTo(y.left+this.config.width/2+C,y.top-this.config.margin+C),this.context.lineTo(y.left+this.config.width/2+C,y.top-this.config.arrowWidth+C),this.context.lineWidth=this.config.lineWidth,this.context.stroke(),this.context.beginPath(),this.context.moveTo(y.left+this.config.width/2+C,y.top),this.context.lineTo(y.left+this.config.width/2-this.config.arrowWidth/2+C,y.top-this.config.arrowWidth),this.context.lineTo(y.left+this.config.width/2+this.config.arrowWidth/2+C,y.top-this.config.arrowWidth),this.context.fill()):W?(this.config.lineDiff&&(C=this.config.margin/2-this.config.margin/this.config.columnsCount*this.diagrams[p].x+(this.config.margin-(this.config.arrowWidth+2*this.config.lineWidth*S))),S++,isFinite(C)||(C=0),this.context.setLineDash&&this.context.setLineDash([this.config.lineWidth,this.config.lineWidth]),this.context.beginPath(),this.context.moveTo(this.diagrams[p].left+this.config.width/2+-1*C,this.diagrams[p].top),this.context.lineTo(this.diagrams[p].left+this.config.width/2+-1*C,this.diagrams[p].top-this.config.margin+C),this.context.lineTo(y.left+this.config.width/2+-1*C,this.diagrams[p].top-this.config.margin+C),this.context.lineTo(y.left+this.config.width/2+-1*C,y.top+this.config.height+this.config.margin+C),this.context.lineTo(y.left+this.config.width/2+-1*C,y.top+this.config.height+this.config.arrowWidth/2),this.context.lineWidth=this.config.lineWidth,this.context.stroke(),this.context.beginPath(),this.context.moveTo(y.left+this.config.width/2+-1*C,y.top+this.config.height),this.context.lineTo(y.left+this.config.width/2-this.config.arrowWidth/2+-1*C,y.top+this.config.height+this.config.arrowWidth),this.context.lineTo(y.left+this.config.width/2+this.config.arrowWidth/2+-1*C,y.top+this.config.height+this.config.arrowWidth),this.context.fill()):(this.config.lineDiff&&(C=this.config.margin/2-this.config.margin/this.config.columnsCount*this.diagrams[p].x),isFinite(C)||(C=0),this.context.beginPath(),this.context.moveTo(this.diagrams[p].left+this.config.width/2+-1*C,this.diagrams[p].top),this.context.lineTo(this.diagrams[p].left+this.config.width/2+-1*C,this.diagrams[p].top-this.config.margin+C),this.context.lineTo(y.left+this.config.width/2+-1*C,y.top+this.config.height+this.config.margin+C),this.context.lineTo(y.left+this.config.width/2+-1*C,y.top+this.config.height+this.config.arrowWidth/2),this.context.lineWidth=this.config.lineWidth,this.context.stroke(),this.context.beginPath(),this.context.moveTo(y.left+this.config.width/2+-1*C,y.top+this.config.height),this.context.lineTo(y.left+this.config.width/2-this.config.arrowWidth/2+-1*C,y.top+this.config.height+this.config.arrowWidth),this.context.lineTo(y.left+this.config.width/2+this.config.arrowWidth/2+-1*C,y.top+this.config.height+this.config.arrowWidth),this.context.fill())}for(var P=0;P<this.diagrams.length;P++)if(!this.diagrams[P].orphan){var L=this.diagrams[P].left,k=this.diagrams[P].top;this.context.fillStyle=this.diagrams[P].bgColor,this.context.strokeStyle=this.diagrams[P].bgColor,o(this.context,L,k,this.config.width,this.config.height,this.config.radius,this.config.hiddenBg);var D=this.context;D.fillStyle=this.diagrams[P].color,D.font=this.config.fontSize+"px "+this.config.fontFamily,s(this.context,this.diagrams[P].text,L+this.config.padding,k,this.config.width-2*this.config.padding,this.config.height,this.config.fontSize+.2*this.config.fontSize)}},this.init(t)}n.r(i),window.JsDiagramChart=h;i.default=h}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,